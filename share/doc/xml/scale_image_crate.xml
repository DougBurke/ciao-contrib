<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd" [
  <!ENTITY pr  '>>>'>
  <!ENTITY keys ' '>
]>
<cxchelptopics>
  <ENTRY key="scale_image_crate" context="contrib"
         refkeywords="scale stretch image crate img image scale asinh arcsin arcsinh lupton sqrt square root squareroot power square log log10 loge display"
         seealsogroups="cr.io">

    <SYNOPSIS>
      Scale the pixel values in an IMAGE crate.
    </SYNOPSIS>

    <SYNTAX>
      <LINE>scale_image_crate(crate, scaling="arcsinh")</LINE>
    </SYNTAX>

    <DESC>
      <PARA>
	This routines applies a scaling function to the pixel values stored in 
	an image crate.
      </PARA>

      <TABLE>
	<CAPTION>Scaling routines</CAPTION>
	<ROW>
	  <DATA>Scaling</DATA><DATA>Description</DATA>
	</ROW>
	<ROW>
	  <DATA>arcsinh or asinh</DATA>
	  <DATA>
	    This scales the data using the arcsinh routine to
	    enhance low-level features whilst preserving structure in bright regions.
	  </DATA>
	</ROW>
	<ROW>
	  <DATA>log</DATA>
	  <DATA>Use the natural logarithm.</DATA>
	</ROW>
	<ROW>
	  <DATA>log10</DATA>
	  <DATA>Use the base-10 logarithm.</DATA>
	</ROW>
	<ROW>
	  <DATA>sqrt</DATA>
	  <DATA>Takes the square root of the pixel values.</DATA>
	</ROW>
	<ROW>
	  <DATA>square</DATA>
	  <DATA>Takes the square of the pixel values.</DATA>
	</ROW>
	<ROW>
	  <DATA>none</DATA>
	  <DATA>Leaves the pixel values unchanged.</DATA>
	</ROW>
      </TABLE>

      <PARA title="WARNING">
	This routine modifies the data in the crate; it does not return a modified copy.
	There is no way to undo the changes made by this routine other than to
	use read_file() to re-read in the original data.
      </PARA>

      <PARA title="Loading the routine">
	The routine can be loaded into Python by saying:
      </PARA>
<VERBATIM>
from crates_contrib.utils import *
</VERBATIM>

      <PARA title="Writing the data out to file">
	The write_file() command can be used to write the scaled data out
	to a new file.
      </PARA>
    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; scale_image_crate(cr)</LINE>
	  <!--
	  <LINE>&pr; add_image(cr)</LINE>
	  <LINE>&pr; set_plot_title("arcsinh scaling")</LINE>
	  <LINE>&pr; set_image(["interpolation", "bilinear"])</LINE>
	  -->
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we use the default scaling method (arcsinh) to scale the data.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; r = read_file("evt2.fits[energy=500:1500][bin sky=::4]")</LINE>
	  <LINE>&pr; g = read_file("evt2.fits[energy=1500:3500][bin sky=::4]")</LINE>
	  <LINE>&pr; b = read_file("evt2.fits[energy=3500:7000][bin sky=::4]")</LINE>
	  <LINE>&pr; scale_image_crate(r)</LINE>
	  <LINE>&pr; scale_image_crate(g)</LINE>
	  <LINE>&pr; scale_image_crate(b)</LINE>
	  <!--
	      <LINE>&pr; add_image(r, g, b)</LINE>
	  -->
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we use the default scaling method (arcsinh) to scale
	    the "soft", "medium", and "hard" bands (these energy
	    ranges are aribtrarily chosen for this example).
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; scale_image_crate(cr, "log")</LINE>
	  <LINE>&pr; write_file(cr, "img.scaled.fits")</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    A new file is created - called img.scaled.fits - which contains the
	    natural logarithm of the pixel values.
	  </PARA>
	</DESC>
      </QEXAMPLE>

    </QEXAMPLELIST>

    <BUGS>
      <PARA>
        See the
        <HREF link="http://cxc.harvard.edu/ciao/bugs/">bug
        pages</HREF>
        on the CIAO website for an up-to-date listing of known bugs.
      </PARA>
    </BUGS>
 
    <LASTMODIFIED>June 2019</LASTMODIFIED>

  </ENTRY>
</cxchelptopics>
