<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd" [
  <!ENTITY pr  'chips>'>
]>
<cxchelptopics>
  <ENTRY key="chips_decorators" context="contrib" pkg="chips"
	 refkeywords="chips_decorator chips_contrib.decorators decorators decorator
		      add_chips_undo_buffer hide_chips_commands
                      chips undo buffer hide commands display
		      python"
	 displayseealsogroups=""
	 seealsogroups="">

    <SYNOPSIS>
      Python decorators for ChIPS
    </SYNOPSIS>

    <SYNTAX>
      <LINE>import chips_contrib.decorators as decorators</LINE>
      <LINE>decorators.add_chips_undo_buffer</LINE>
      <LINE>decorators.hide_chips_commands</LINE>
    </SYNTAX>

    <DESC>
      <PARA>
        This module provides
        <HREF link="http://pythonconquerstheuniverse.wordpress.com/2012/04/29/python-decorators/">Python decorators</HREF>
        for ChIPS. These decorators allow you to write routines that
        call multiple ChIPS commands and make the changes appear
        all at once.
      </PARA>

      <PARA title="Loading the routines">
        The module can be loaded into ChIPS, Sherpa or Python
	scripts by saying:
      </PARA>

<VERBATIM>
import chips_contrib.decorators as decorators
</VERBATIM>

      <PARA title="Contents">
	This module currenly provides two routines: add_chips_undo_buffer
        and hide_chips_commands.
      </PARA>

      <TABLE>
	<ROW><DATA>Routine</DATA><DATA>Overview</DATA></ROW>
        <ROW>
	  <DATA>add_chips_undo_buffer</DATA>
	  <DATA>
            The decorated function is run within a ChIPS undo buffer so that
            the results are only seen at the end of the routine, the ChIPS
            changes made by the routine can be undone with a single undo call,
            and any error within the function means that no ChIPS changes
            are made.
	  </DATA>
	</ROW>
        <ROW>
	  <DATA>hide_chips_commands</DATA>
	  <DATA>
            The decorated function is run with the window display setting changed
            to False, so that no changes are seen until the function ends, at
            which time the display is changed to True.
	  </DATA>
	</ROW>
      </TABLE>

    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
        <DESC>
          <PARA>
            The following code:
	  </PARA>
<VERBATIM>
from pychips import *
from chips_contrib.decorators import add_chips_undo_buffer

@add_chips_undo_buffer()
def set_labels(xlabel=None, ylabel=None, title=None, size=18):
    "Sets the x, y and title labels, if set"

    if xlabel != None:
        set_plot_xlabel(xlabel)
        set_xaxis(['label.size', size])
    if ylabel != None:
        set_plot_ylabel(ylabel)
        set_yaxis(['label.size', size])
    if title != None:
        set_plot_title(title)
        set_plot(['title.size', size])

</VERBATIM>
          <PARA>
            can be used in ChIPS (or a script) so that the calls appear to
            be made at once, and undo/redo treat set_labels as if it were
            a single ChIPS command:
	  </PARA>
          <PARA>
            <SYNTAX>
              <LINE>&pr; set_labels('X axis', 'Y axis', 'Plot title')</LINE>
              <LINE>&pr; undo()</LINE>
              <LINE>&pr; redo()</LINE>
	    </SYNTAX>
	  </PARA>
          <PARA>
            If the hide_chips_command decorator had been used instead, 
            the changes would also appear as one, but the undo and redo
            commands would not behave as above, but instead you would step
            through all the changes made in the function.
	  </PARA>
	</DESC>
      </QEXAMPLE>
    </QEXAMPLELIST>

    <ADESC title="Notes for the add_chips_undo_buffer decorator">
      <PARA>
        This decorator should not be nested, i.e. do not apply it to
        a function that calls another function that uses it.
      </PARA>
    </ADESC>

    <ADESC title="Notes for the hide_chips_commands decorator">
      <PARA>
        This decorator is only designed for routines that work with a
        single window. It will work when no window exists, but it will not
        work if a window exists but the routine calls add_window to create
        a new window.
      </PARA>
      <PARA>
        The window display is only set back to True at the end of the
        decorated routine if either the window existed when the routine
        started and its display value at that time was True, or if no
        window existed and the window.display preference setting was 'true'.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.5.4 (August 2013) release">
      <PARA>
	The chips_contrib.decorators module is new in this release.
      </PARA>
    </ADESC>

    <ADESC title="About Contributed Software">
      <PARA>
        This module is not an official part of the CIAO release but is
        made available as "contributed" software via the
        <HREF link="https://cxc.harvard.edu/ciao/download/scripts/">CIAO scripts page</HREF>.
        Please see this page for installation instructions.
      </PARA>
    </ADESC>

    <LASTMODIFIED>August 2013</LASTMODIFIED>
  </ENTRY>
</cxchelptopics>
