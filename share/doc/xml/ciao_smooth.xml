<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd" [
  <!ENTITY pr  'sherpa>'>
]>
<cxchelptopics>
  <ENTRY key="ciao_smooth" context="contrib"
	 refkeywords="ciao_contrib.smooth smooth kernel convolve gsmooth bsmooth tsmooth ismooth fsmooth
		      gauss gaussian box boxcar tophat top hat top-hat file kernel image 2d array 
		      fft origin "
	 seealsogroups="">

    <SYNOPSIS>
      Simple smoothing routines for 2D data
    </SYNOPSIS>

    <SYNTAX>
      <LINE>Load the module:</LINE>
      <LINE>from ciao_contrib.smooth import *</LINE>
      <LINE/>
      <LINE>Routines:</LINE>
      <LINE>smoothed = gsmooth(image, sigma, nsigma=5)</LINE>
      <LINE>smoothed = bsmooth(image, radius)</LINE>
      <LINE>smoothed = tsmooth(image, radius)</LINE>
      <LINE>smoothed = fsmooth(image, filename, norm=True, origin=None)</LINE>
      <LINE>smoothed = ismooth(image, kernel, norm=True, origin=None)</LINE>
      <LINE/>
      <LINE>where image is a 2D numpy array (which can contain NaN values)</LINE>
    </SYNTAX>

    <DESC>
      <PARA>
	The ciao_contrib.smooth module provides several routines
	to smooth (or convolve) 2D data,
	and is provided as part of the
	<HREF link="https://cxc.harvard.edu/ciao/download/scripts/">CIAO contributed
	scripts</HREF> package.
      </PARA>

      <PARA title="Loading the routines">
        The module can be loaded into Sherpa or a Python
	program by saying:
      </PARA>

<VERBATIM>
from ciao_contrib.smooth import *
</VERBATIM>

      <PARA title="Gaussian smoothing">
	The gsmooth() routine smoothes an image with a gaussian with
	a given sigma (in pixels) and using a box with half-width
	equal to <EQUATION>sigma * nsigma</EQUATION>
	The default value for nsigma is 5.
      </PARA>

      <PARA title="Top-hat smoothing">
	The tsmooth() routine smoothes an image with a top-hat filter
	of the given radius. This is a circular kernel which is flat
	within the radius and zero outside it. The radius is treated
	as an integer value here.
      </PARA>

      <PARA title="Box-car smoothing">
	The bsmooth() routine smoothes an image with a box-car filter
	of the given radius. This is a square kernel with a constant value
	for all pixels.
	The radius is treated as an integer value here.
      </PARA>

      <PARA title="Smothing by an image">
	The ismooth() routine will smooth an image by a kernel image.
	The default behavior is to normalize the kernel by its sum before
	smoothing; to use the input kernel values directly set the
	norm parameter to True.
	The kernel is assumed to be centered; to use
	a different center use the origin argument which accepts a
	pair (y,x), giving the pixel location of the origin. This location
	uses 0-indexing, so the center of a nx=5 by ny=3 array would be (1,2).
	Any non-finite values in the kernel image are replaced by 0.
      </PARA>

      <PARA title="Smothing by a file">
	The fsmooth() routine is similar to the ismooth() routine; the
	difference being that instead of an image the input is the
	name of a file containing the image to use as the smoothing
	kernel.
      </PARA>

    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; from ciao_contrib.smooth import *</LINE>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; img = copy_piximgvals(cr)</LINE>
	  <LINE>&pr; simg = gsmooth(img, 3)</LINE>
	  <LINE>&pr; import maplotlib.pyplot as plt</LINE>
	  <LINE>&pr; plt.imshow(simg, origin='lower')</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we smooth the data in img.fits with a gaussian using a sigma of
	    3 pixels before displaying it using the Matplotlib imshow routine.
	    <!--
	    See the following example for how the WCS information can be retained
	    in the output plot.
	    -->
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; img = copy_piximgvals(cr)</LINE>
	  <LINE>&pr; set_piximgvals(cr, gsmooth(img, 3))</LINE>
	  <!--
	      <LINE>&pr; add_image(cr)</LINE>
	  -->
	</SYNTAX>
	<DESC>
	  <PARA>
	    This is the same as the previous example except that we 
	    store the smoothed image back into the Crate.
	    <!--
	    By passing this
	    crate (the varable cr) to the add_image() call we can display
	    the smoothed image using any WCS information read in with the file.
	    -->
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; img = copy_piximgvals(cr)</LINE>
	  <LINE>&pr; simg = gsmooth(img, 3)</LINE>
	  <LINE>&pr; set_piximgvals(cr, np.arcsinh(simg))</LINE>
	  <!--
	      <LINE>&pr; add_image(cr)</LINE>
	  -->
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here the smoothed image is scaled using the "arcsinh" function
	    before it is added back to the Crate. See the scale_image_crate
	    routine for more information on this scaling.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; img = copy_piximgvals(cr)</LINE>
	  <LINE>&pr; import matplotlib.pyplot as plt</LINE>

	  <LINE>&pr; plt.subplot(2, 2, 1)</LINE>
	  <LINE>&pr; plt.imshow(img, origin='lower')</LINE>
	  
	  <LINE>&pr; plt.subplot(2, 2, 2)</LINE>
	  <LINE>&pr; plt.imshow(gsmooth(img, 5), origin='lower')</LINE>
	  
	  <LINE>&pr; plt.subplot(2, 2, 3)</LINE>
	  <LINE>&pr; plt.imshow(bsmooth(img, 5), origin='lower')</LINE>
	  
	  <LINE>&pr; plt.subplot(2, 2, 4)</LINE>
	  <LINE>&pr; plt.imshow(tsmooth(img, 5), origin='lower')</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we compare the original image to gaussian, box-car,
	    and top-hat smoothed versions in a two-by-two plot.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr1 = read_file("img.fits")</LINE>
	  <LINE>&pr; img = copy_piximgvals(cr1)</LINE>
	  <LINE>&pr; cr2 = read_file("psf.fits")</LINE>
	  <LINE>&pr; kern = copy_piximgvals(cr2)</LINE>
	  <LINE>&pr; sm = ismooth(img, kern)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we smooth an image ("img.fits") using another image ("psf.fits").
	    The kernel is assumed to be centered in the image in psf.fits.
	    See the following example for another way of performing this task.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr1 = read_file("img.fits")</LINE>
	  <LINE>&pr; img = copy_piximgvals(cr1)</LINE>
	  <LINE>&pr; sm = fsmooth(img, "psf.fits")</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we smooth an image ("img.fits") using another image ("psf.fits").
	    The kernel is assumed to be centered in the image in psf.fits.
	    See the preceeding example for another way of performing this task.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; ivals = np.asarray([0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0])</LINE>
	  <LINE>&pr; ivals.resize(4,4)</LINE>
	  <LINE>&pr; kvals = np.asarray([0,0,0,1,1,1,0,0,0]).reshape(3,3)</LINE>
	  <LINE>&pr; svals = ismooth(ivals, kvals)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we create two 2D arrays (the "image" with a size of 4 by 4 and
	    the "kernel" with a size of 3 by 3) and smooth ivals by kvals.
	    Although both arrays are square they do not need to be; the kernel
	    should have odd dimensionality and be centered in the array
	    to avoid the possibility of a coordinate shift in the output image.
	  </PARA>
	  <PARA>
	    The input arrays are:
	  </PARA>
<VERBATIM>
&pr; print(ivals)
[[0 0 0 0]
 [0 1 1 0]
 [0 1 1 0]
 [0 0 0 0]]
&pr; print(kvals)
[[ 0.  0.  0.]
 [ 1.  1.  1.]
 [ 0.  0.  0.]]
</VERBATIM>
	  <PARA>
	    and the result is:
	  </PARA>
<VERBATIM>
&pr; print(svals)
[[ 0.          0.          0.          0.        ]
 [ 0.33333333  0.66666667  0.66666667  0.33333333]
 [ 0.33333333  0.66666667  0.66666667  0.33333333]
 [ 0.          0.          0.          0.        ]]
</VERBATIM>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; ivals = np.asarray([0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0])</LINE>
	  <LINE>&pr; ivals.resize(4,4)</LINE>
	  <LINE>&pr; kvals = np.asarray([0,0,0,1,1,1,0,0,0]).reshape(3,3)</LINE>
	  <LINE>&pr; svals = ismooth(ivals, kvals, norm=False)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    By setting the norm parameter to False the kernel image
	    is not normalized before smoothing, which creates an output
	    image of:
	  </PARA>
<VERBATIM>
&pr; print(svals)
[[ 0.  0.  0.  0.]
 [ 1.  2.  2.  1.]
 [ 1.  2.  2.  1.]
 [ 0.  0.  0.  0.]]
</VERBATIM>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; ivals = np.asarray([0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0])</LINE>
	  <LINE>&pr; ivals.resize(4,4)</LINE>
	  <LINE>&pr; kvals = np.asarray([0,0,0,0,0,0,0,1,0]).reshape(3,3)</LINE>
	  <LINE>&pr; svals1 = ismooth(ivals, kvals)</LINE>
	  <LINE>&pr; svals2 = ismooth(ivals, kvals, origin=(2,1))</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    In this example we show how the origin parameter of the smooth
	    routine is used by creating a kernel where only a single pixel set,
	    but this pixel is off-set from the center of the kernel:
	  </PARA>
<VERBATIM>
&pr; print(kvals)
[[0 0 0]
 [0 0 0]
 [0 1 0]]
</VERBATIM>
	  <PARA>
	    When used with the default origin setting, the result is a shifted
	    output (svals1), as shown below:
	  </PARA>
<VERBATIM>
&pr; print(svals1)
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  1.  1.  0.]
 [ 0.  1.  1.  0.]]
</VERBATIM>	    
	  <PARA>
	    By changing the origin to the peak position of the kernel,
	    the output is no-longer shifted with respect to the input image.
	  </PARA>
<VERBATIM>
&pr; print(svals2)
[[ 0.  0.  0.  0.]
 [ 0.  1.  1.  0.]
 [ 0.  1.  1.  0.]
 [ 0.  0.  0.  0.]]
</VERBATIM>
	</DESC>
      </QEXAMPLE>

    </QEXAMPLELIST>

    <ADESC title="Dealing with NaN/Inf values">
      <PARA>
	Since the smoothing is performed using a Fast Fourier Transform (FFT),
	any pixels with a non-finite value (such as NaN or Inf) are 
	set to 0. On output these pixels are set to NaN
	values.
      </PARA>
    </ADESC>

    <ADESC title="Identity transforms">
      <PARA>
	If the scale parameter (radius or sigma) is set to 0 for
	gsmooth(), bsmooth() or tsmooth() then the smoothing
	function is set to a 1 by 1 image - i.e. the identity transform.
	Since the smoothing is done via a FFT the output image
	in this case will be very-close, but not identical, to the input
	image.
      </PARA>
    </ADESC>

    <BUGS>
      <PARA>
        See the
        <HREF link="https://cxc.harvard.edu/ciao/bugs/">bugs pages</HREF>
	for an up-to-date listing of known bugs.
      </PARA>
    </BUGS>

    <LASTMODIFIED>December 2019</LASTMODIFIED>
  </ENTRY>
</cxchelptopics>
