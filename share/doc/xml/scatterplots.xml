<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd" [
  <!ENTITY pr  'chips>'>
  <!ENTITY npr '      '>
]>
<cxchelptopics>
  <ENTRY key="scatterplots" context="contrib" pkg="chips"
         refkeywords="add create display show plot variable variables
		      splot splots scatterplot scatter matrix grid matrices multiple"
	 seealsogroups="ch.scatter"
	 displayseealsogroups="">

    <SYNOPSIS>
      Create, or add to, a set of scatter plots.
    </SYNOPSIS>

    <SYNTAX>
      <LINE>scatterplots(data, style='all', margin=0.15, gap=0.05, symbol='circle', color='blue', size=2, fill=True, ticks=4, overplot=False)</LINE>

      <LINE/>
      <LINE>The routine is also available as chips_contrib.scatter.splots()</LINE>
    </SYNTAX>

    <DESC>
      <PARA>
	This routine will create a grid of scatter plots, each plot
	displaying two of the variables in the input data set.
	It provides a quick way to see how the different variables
	are correlated.
      </PARA>

      <PARA>
	The routine can be used to create a new plot, or overlay
	new data on an existing set of scatterplots (when
	overplot=True). In the latter case the style, margin,
	gap, and ticks arguments are ignored.
      </PARA>

      <PARA title="Data to display">
	The data to be displayed can be given in one of the following
	forms
      </PARA>

      <LIST>
	<ITEM>
	  a filename, which can contain CIAO Data Model syntax, 
	  and represents a table or a 2D image;
	</ITEM>
	<ITEM>
	  a Crate, containing a table or 2D image;
	</ITEM>
	<ITEM>
	  a dictionary, where the keys are the variable names and the
	  values are the variable values;
	</ITEM>
	<ITEM>
	  a sequence - e.g. list or tuple - of arrays, one for each
	  variable (names are set to "x0", "x1", ...);
	</ITEM>
	<ITEM>
	  or a 2D image, which is treated as a selection of columns
	  (so that a nx by ny image has nx variables, labelled
	  "x0", "x1", ...).
	</ITEM>
      </LIST>

      <PARA title="Plot arrangement and layout">
	When overplot=False, which is the default, the scatterplots()
	command creates a grid of plots, with separation given by the
	gap argument and the spacing between the edge of the grid
	and the frame by the margin argument. The style argument
	determines whether a grid of n by n plots is created
	(style='all'), or if only the upper-right triangle
	(style='upper') or lower-left triangle (style='lower')
	is created. In all three cases the diagonal values
	are displayed, since they label the columns and rows.
      </PARA>

      <PARA>
	The ticks argument controls how many major tick marks there
	are on each axis. If set to None then each axis will
	be displayed using the "limits" majortick.mode setting.
	When given an integer greater than 1, the ticks argument
	is used to change each axis to use the "counts" majortick.mode,
	where ticks controls the number of major tick marks displayed.
	This can make the axis much-more readable, but at the expense
	of using a larger range than covered by the variable.
	The limits for a variable can be changed by using the
	scatterlimits() routine.
	Each variable is displayed using a linear scale; the scatterlog()
	command can be used to switch to a logarithmic scale.
      </PARA>

      <PARA>
	Once scatterplots() has been called, the grid spacing 
	and size can
	be modified using the
	adjust_grid_gaps, 
	adjust_grid_xrelsize,
	adjust_grid_xrelsizes, 
	adjust_grid_yrelsize,
	and adjust_grid_yrelsizes 
	routines.
      </PARA>

      <PARA title="Curve properties">
	The symbol, color, size, and fill arguments correspond
	to the symbol.style, symbol.color, symbol.size, and
	symbol.fill attributes of the curve.
      </PARA>

      <PARA title="Overplotting">
	When overplot=True, the gap,margin, style, and nticks
	arguments are ignored. Data are added to matching plots,
	with unknown variables ignored. The overplot call does
	not have to include data for all the variables in the
	original grid.
      </PARA>

      <PARA title="Loading the routine">
	The routine can be loaded into a ChIPS, Sherpa 
	or Python session by saying:
      </PARA>

<VERBATIM>
from chips_contrib.scatter import *
</VERBATIM>

      <PARA>
	or, to access the qualified version of the name,
      </PARA>

<VERBATIM>
from chips_contrib import scatter
</VERBATIM>

      <PARA>
	after which the scatter.splots() routine can be used.
      </PARA>

    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; from chips_contrib.scatter import *</LINE>
	  <LINE>&pr; add_window(9, 9, 'inches')</LINE>
	  <LINE>&pr; scatterplots('iris.fits')</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    The first line - "from chips_contrib.scatter import *" -
	    loads the scatterplot routines; it
	    only needs to be made once per ChIPS session.
	    The numeric columns in iris.fits are plotted against each other
	    in a n by n grid of plots.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; scatterplots('iris.fits', style='upper', gap=0.02, margin=0.05)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    The grid of plots now only includes the upper-right plots, 
	    and the spacing between the plots, and gap between the plots
	    and the frame edge, have been decreased.
	  </PARA>
	</DESC>
      </QEXAMPLE>
      
      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; add_window(12, 12, 'inches')</LINE>
	  <LINE>&pr; scatterplots('iris.fits[species=setosa]', color='red', margin=0.05)</LINE>
	  <LINE>&pr; scatterplots('iris.fits[species=versicolor]', color='green', overplot=True)</LINE>
	  <LINE>&pr; scatterplots('iris.fits[species=virginica]', color='blue', overplot=True)</LINE>
	  <LINE>&pr; scatterlimits('petal_length', 0, 8)</LINE>
	  <LINE>&pr; scatterlimits('sepal_length', 4, 8)</LINE>
	  <LINE>&pr; adjust_grid_gaps(0.02, 0.02)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    If iris.fits contains the 
	    <HREF link="https://en.wikipedia.org/wiki/Iris_flower_data_set">Fisher Iris data set</HREF>
	    then this
	    creates a plot similar to that shown on the
	    <HREF link="https://en.wikipedia.org/wiki/Iris_flower_data_set#mediaviewer/File:Anderson%27s_Iris_data_set.png">Wikipedia
	      page</HREF>.
	    The display ranges for the petal_length and sepal_length variables
	    are changed, and the spacing between the plots is reduced.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; scatterplots([x, y, z])</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Create scatter plots for the data stored in the x, y, and z
	    variables: they are assumed to be 1D lists or NumPy arrays.
	    The variable names are set to "x0", "x1", and "x2".
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; scatterplots({'x': x, 'y': y, 'z': z})</LINE>
	  <LINE>&pr; idx = z > 0.2</LINE>
	  <LINE>&pr; scatterplots({'x': x[idx], 'y': y[idx]}, color='orange', overplot=True)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    The x and y points with z > 0.2 are drawn in orange.
	    Since the values are given in a dictionary, the order
	    of the plots is not guaranteed. An
	    <HREF link="https://docs.python.org/2/library/collections.html#collections.OrderedDict">ordered dictionary</HREF>
	    could be used if the order is important.
	  </PARA>
	</DESC>
      </QEXAMPLE>

    </QEXAMPLELIST>

    <ADESC title="Changes in the scripts 4.7.1 (December 2014) release">
      <PARA>
	This routine is new in this release.
      </PARA>
    </ADESC>

    <BUGS>
      <PARA>
        See the
        <HREF link="https://cxc.harvard.edu/ciao/bugs/">bug
        pages</HREF>
        on the CIAO website for an up-to-date listing of known bugs.
      </PARA>
    </BUGS>
 
    <LASTMODIFIED>December 2014</LASTMODIFIED>

  </ENTRY>
</cxchelptopics>
