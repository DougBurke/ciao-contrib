<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd" [
  <!ENTITY pr  '>>>'>
]>
<cxchelptopics>
  <ENTRY key="smooth_image_crate" context="contrib"
         refkeywords="image crate smooth convolve fft smoothing "
         seealsogroups="cr.io ">

    <SYNOPSIS>
      Smooth the pixel values in an IMAGE crate.
    </SYNOPSIS>

    <SYNTAX>
      <LINE>smooth_image_crate(crate, type, arguments...)</LINE>
    </SYNTAX>

    <DESC>
      <PARA>
	This routines smoothes the pixel values stored in 
	an image crate.
	If you want to smooth an image and save it to disk it is suggested
	that the aconvolve tool be used rather than this one.
      </PARA>

      <PARA>
	The smoothing options are given below:
      </PARA>

      <TABLE>
	<CAPTION>Smoothing routines</CAPTION>
	<ROW>
	  <DATA>type</DATA><DATA>Other parameters</DATA><DATA>Description</DATA>
	</ROW>
	<ROW>
	  <DATA>gauss</DATA><DATA>sigma, nsigma=5</DATA>
	  <DATA>
	    Smooth with a gaussian; sigma is in pixels and nsigma gives the
	    half-width of the box over which the gaussian should be calculated.
	  </DATA>
	</ROW>
	<ROW>
	  <DATA>boxcar</DATA><DATA>radius</DATA>
	  <DATA>
	    Smooth with a box-car kernel of the given radius (in pixels).
	    This is a square kernel with all pixels set to the same value.
	  </DATA>
	</ROW>
	<ROW>
	  <DATA>tophat</DATA><DATA>radius</DATA>
	  <DATA>
	    Smooth with a top-hat kernel of the given radius (in pixels).
	    This is a circlular kernel where all pixels within the radius are
	    set to the same value and those outside are set to 0.
	  </DATA>
	</ROW>
	<ROW>
	  <DATA>image</DATA><DATA>kernel, norm=True, origin=None</DATA>
	  <DATA>
	    Smooth with the given image (a 2D numpy array). The kernel is normalized
	    by default (each pixel in the kernel is divided by the total signal in the kernel);
	    this can be turned off by setting norm to False.
	    The origin of the kernel is taken to be the image center; to change this
	    set the origin parameter to the location of the pixel using
	    (y,x), with x and y starting at 0 for the first pixel in the kernel.
	    See "ahelp ciao_smooth" for more information on these parameters.
	  </DATA>
	</ROW>
	<ROW>
	  <DATA>file</DATA><DATA>filename, norm=True, origin=None</DATA>
	  <DATA>
	    Smooth with the image in the given file. The norm and origin parameters
	    have the same meaning as the image option above.
	  </DATA>
	</ROW>
	<ROW>
	  <DATA>none</DATA><DATA/><DATA>Leaves the pixel values unchanged.</DATA>
	</ROW>
      </TABLE>

      <PARA title="WARNING">
	This routine modifies the data in the crate; it does not return a modified copy.
	There is no way to undo the changes made by this routine other than to
	use read_file() to re-read in the original data.
      </PARA>

      <PARA title="Loading the routine">
	The routine can be loaded into Python by saying:
      </PARA>
<VERBATIM>
from crates_contrib.utils import *
</VERBATIM>

      <PARA title="Writing the data out to file">
	The write_file() command can be used to write the smoothed data out
	to a new file. As mentioned above, the aconvolve tool is more
	appropriate if you wish to use the smoothed image with other CIAO tools.
      </PARA>
    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; from crates_contrib.utils import *</LINE>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; smooth_image_crate(cr, "gauss", 5)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    The data in img.fits is smoothed with a gaussian.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; smooth_image_crate(cr, "tophat", 3)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here the image is smoothed with a 3-pixel radius top-hat kernel.
	    Note that the data is re-loaded from the file (otherwise
	    the previously-smoothed image would have been used).
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; smooth_image_crate(cr, "file", "psf.fits")</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here the image is smoothed by the contents of the 
	    image file "psf.fits".
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; k = np.asarray([0,1,0,1,2,1,0,1,0]).reshape(3,3)</LINE>
	  <LINE>&pr; smooth_image_crate(cr, "image", k)</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    The image is smoothed by a user-supplied kernel, in this case:
	  </PARA>
<VERBATIM>
&pr; print(k)
[[0 1 0]
 [1 2 1]
 [0 1 0]]
</VERBATIM>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&pr; cr = read_file("img.fits")</LINE>
	  <LINE>&pr; smooth_image_crate(cr, "gauss", 3)</LINE>
	  <LINE>&pr; scale_image_crate(cr, "arcsinh")</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here we smooth an image and then apply an arcsinh transform
	    to the smoothed data.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<DESC>
	  <PARA>
	    In this example we create a routine called getfile 
	    which reads in an image from
	    a file, smooths it with a 3-pixel radius top-hat function,
	    applies square-root scaling to it, and then returns the crate.
	  </PARA>
<VERBATIM>
&pr; def getfile(fname):
           cr = read_file(fname)
           smooth_image_crate(cr, "tophat", 3)
           scale_image_crate(cr, "sqrt")
           return cr

</VERBATIM>
	</DESC>
      </QEXAMPLE>

    </QEXAMPLELIST>

    <BUGS>
      <PARA>
        See the
        <HREF link="http://cxc.harvard.edu/ciao/bugs/">bug
        pages</HREF>
        on the CIAO website for an up-to-date listing of known bugs.
      </PARA>
    </BUGS>
 
    <LASTMODIFIED>June 2019</LASTMODIFIED>

  </ENTRY>
</cxchelptopics>
