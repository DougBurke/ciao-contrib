#
#  Copyright (C) 2014, 2015, 2016
#            Smithsonian Astrophysical Observatory
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

"""
Very basic interface for adding X-Spec user models, compiled
with convert_xspec_user_model, into a running Python session.
It is intended to be equivalent to the lmod command in X-Spec.

"""

import os
import importlib

from six.moves import builtins

__all__ = ("lmod", )


# The screen output in lmod could have been controlled by the
# sherpa logger instance, but I think it's possible (but unlikely)
# that the logging infrastructure isn't initialized at this point,
# so use an explicit argument (it's also a "simpler" interface than
# turning off the logging). This may change in the future.
#

def _report_models(modtype, mdls):
    """Display the list of models, if there are any."""

    nmdls = len(mdls)
    if nmdls == 0:
        return

    if nmdls == 1:
        print("There is one {} model:".format(modtype))
    else:
        print("There are {} {} models:".format(nmdls, modtype))

    for mdl in mdls:
        print("  {}".format(mdl))

    print("")


def lmod(module, dirname=".", verbose=True):
    """Import module that is in dirname.

    It is intended to act in a similar manner to the
    X-Spec lmod command, and is for modules created
    by the convert_xspec_user_model script.

    Parameters
    ----------
    module : string
        The name of the module (the first argument to
        convert_xspec_user_model).
    dirname : str, optional
        The directory in which convert_xspec_user_model
        was run.
    verbose : bool, optional
        If True (default value) display the models
        that have been loaded from the module.

    .. note:: Re-loading models
              Unlike the X-Spec version, the `lmod` command will
              *not* load a new version of the the module into the
              same python session (e.g. if the code has been
              re-compiled by convert_xspec_user_model).

    """

    os.sys.path.insert(0, dirname)
    try:
        modinfo = importlib.import_module(module)
    finally:
        os.sys.path.pop(0)

    # Try to make the module available to the user; this
    # is a rather dangerous hack and may be removed.
    #
    setattr(builtins, module, modinfo)

    # If there are any convolution components,
    # load them
    for cmdl in modinfo.provenance['convolve']:
        setattr(builtins, cmdl, getattr(modinfo, cmdl))

    if verbose:
        print("Loaded: {}\n".format(module))
        for (t, l) in [('additive', None),
                       ('multiplicative', None),
                       ('convolve', 'convolution')]:
            if l is None:
                l = t
            _report_models(l, modinfo.provenance[t])

# End
